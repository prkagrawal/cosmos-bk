package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/prkagrawal/cosmos-bk2/graph/model"
)

// ID is the resolver for the id field.
func (r *applicationResolver) ID(ctx context.Context, obj *model.Application) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// AppliedAt is the resolver for the appliedAt field.
func (r *applicationResolver) AppliedAt(ctx context.Context, obj *model.Application) (string, error) {
	panic(fmt.Errorf("not implemented: AppliedAt - appliedAt"))
}

// DecidedAt is the resolver for the decidedAt field.
func (r *applicationResolver) DecidedAt(ctx context.Context, obj *model.Application) (*string, error) {
	panic(fmt.Errorf("not implemented: DecidedAt - decidedAt"))
}

// HoursPerWeek is the resolver for the hoursPerWeek field.
func (r *availabilityResolver) HoursPerWeek(ctx context.Context, obj *model.Availability) (int32, error) {
	panic(fmt.Errorf("not implemented: HoursPerWeek - hoursPerWeek"))
}

// DaysAvailable is the resolver for the daysAvailable field.
func (r *availabilityResolver) DaysAvailable(ctx context.Context, obj *model.Availability) ([]model.Weekday, error) {
	panic(fmt.Errorf("not implemented: DaysAvailable - daysAvailable"))
}

// ID is the resolver for the id field.
func (r *causeResolver) ID(ctx context.Context, obj *model.Cause) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *engagementResolver) ID(ctx context.Context, obj *model.Engagement) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// StartDate is the resolver for the startDate field.
func (r *engagementResolver) StartDate(ctx context.Context, obj *model.Engagement) (string, error) {
	panic(fmt.Errorf("not implemented: StartDate - startDate"))
}

// EndDate is the resolver for the endDate field.
func (r *engagementResolver) EndDate(ctx context.Context, obj *model.Engagement) (*string, error) {
	panic(fmt.Errorf("not implemented: EndDate - endDate"))
}

// FeedbackSubmittedAt is the resolver for the feedbackSubmittedAt field.
func (r *engagementResolver) FeedbackSubmittedAt(ctx context.Context, obj *model.Engagement) (*string, error) {
	panic(fmt.Errorf("not implemented: FeedbackSubmittedAt - feedbackSubmittedAt"))
}

// ID is the resolver for the id field.
func (r *hoursLoggedResolver) ID(ctx context.Context, obj *model.HoursLogged) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Date is the resolver for the date field.
func (r *hoursLoggedResolver) Date(ctx context.Context, obj *model.HoursLogged) (string, error) {
	panic(fmt.Errorf("not implemented: Date - date"))
}

// ApprovedAt is the resolver for the approvedAt field.
func (r *hoursLoggedResolver) ApprovedAt(ctx context.Context, obj *model.HoursLogged) (*string, error) {
	panic(fmt.Errorf("not implemented: ApprovedAt - approvedAt"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.SignupInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Signup - signup"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, token string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.ProfileInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateProfile - updateProfile"))
}

// AddSkills is the resolver for the addSkills field.
func (r *mutationResolver) AddSkills(ctx context.Context, skills []string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: AddSkills - addSkills"))
}

// RemoveSkill is the resolver for the removeSkill field.
func (r *mutationResolver) RemoveSkill(ctx context.Context, skill string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: RemoveSkill - removeSkill"))
}

// SetAvailability is the resolver for the setAvailability field.
func (r *mutationResolver) SetAvailability(ctx context.Context, input model.AvailabilityInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: SetAvailability - setAvailability"))
}

// CreateNonprofit is the resolver for the createNonprofit field.
func (r *mutationResolver) CreateNonprofit(ctx context.Context, input model.NonprofitInput) (*model.Nonprofit, error) {
	panic(fmt.Errorf("not implemented: CreateNonprofit - createNonprofit"))
}

// UpdateNonprofit is the resolver for the updateNonprofit field.
func (r *mutationResolver) UpdateNonprofit(ctx context.Context, id string, input model.NonprofitInput) (*model.Nonprofit, error) {
	panic(fmt.Errorf("not implemented: UpdateNonprofit - updateNonprofit"))
}

// VerifyNonprofit is the resolver for the verifyNonprofit field.
func (r *mutationResolver) VerifyNonprofit(ctx context.Context, id string) (*model.Nonprofit, error) {
	panic(fmt.Errorf("not implemented: VerifyNonprofit - verifyNonprofit"))
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.ProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.ProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// ChangeProjectStatus is the resolver for the changeProjectStatus field.
func (r *mutationResolver) ChangeProjectStatus(ctx context.Context, id string, status model.ProjectStatus) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: ChangeProjectStatus - changeProjectStatus"))
}

// ApplyToProject is the resolver for the applyToProject field.
func (r *mutationResolver) ApplyToProject(ctx context.Context, projectID string, message *string) (*model.Application, error) {
	panic(fmt.Errorf("not implemented: ApplyToProject - applyToProject"))
}

// AcceptApplication is the resolver for the acceptApplication field.
func (r *mutationResolver) AcceptApplication(ctx context.Context, applicationID string) (*model.Application, error) {
	panic(fmt.Errorf("not implemented: AcceptApplication - acceptApplication"))
}

// RejectApplication is the resolver for the rejectApplication field.
func (r *mutationResolver) RejectApplication(ctx context.Context, applicationID string) (*model.Application, error) {
	panic(fmt.Errorf("not implemented: RejectApplication - rejectApplication"))
}

// StartVolunteering is the resolver for the startVolunteering field.
func (r *mutationResolver) StartVolunteering(ctx context.Context, projectID string) (*model.Engagement, error) {
	panic(fmt.Errorf("not implemented: StartVolunteering - startVolunteering"))
}

// CompleteEngagement is the resolver for the completeEngagement field.
func (r *mutationResolver) CompleteEngagement(ctx context.Context, engagementID string, feedback *string) (*model.Engagement, error) {
	panic(fmt.Errorf("not implemented: CompleteEngagement - completeEngagement"))
}

// LogHours is the resolver for the logHours field.
func (r *mutationResolver) LogHours(ctx context.Context, engagementID string, hours float64, date string, description *string) (*model.HoursLogged, error) {
	panic(fmt.Errorf("not implemented: LogHours - logHours"))
}

// ID is the resolver for the id field.
func (r *nonprofitResolver) ID(ctx context.Context, obj *model.Nonprofit) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Logo is the resolver for the logo field.
func (r *nonprofitResolver) Logo(ctx context.Context, obj *model.Nonprofit) (*string, error) {
	panic(fmt.Errorf("not implemented: Logo - logo"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *nonprofitResolver) CreatedAt(ctx context.Context, obj *model.Nonprofit) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *nonprofitResolver) UpdatedAt(ctx context.Context, obj *model.Nonprofit) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *projectResolver) ID(ctx context.Context, obj *model.Project) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// StartDate is the resolver for the startDate field.
func (r *projectResolver) StartDate(ctx context.Context, obj *model.Project) (*string, error) {
	panic(fmt.Errorf("not implemented: StartDate - startDate"))
}

// EndDate is the resolver for the endDate field.
func (r *projectResolver) EndDate(ctx context.Context, obj *model.Project) (*string, error) {
	panic(fmt.Errorf("not implemented: EndDate - endDate"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *projectResolver) CreatedAt(ctx context.Context, obj *model.Project) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *projectResolver) UpdatedAt(ctx context.Context, obj *model.Project) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Nonprofit is the resolver for the nonprofit field.
func (r *projectResolver) Nonprofit(ctx context.Context, obj *model.Project) (*model.Nonprofit, error) {
	panic(fmt.Errorf("not implemented: Nonprofit - nonprofit"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, skills []string, availability *model.AvailabilityFilter, role *model.UserRole) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Nonprofit is the resolver for the nonprofit field.
func (r *queryResolver) Nonprofit(ctx context.Context, id string) (*model.Nonprofit, error) {
	panic(fmt.Errorf("not implemented: Nonprofit - nonprofit"))
}

// Nonprofits is the resolver for the nonprofits field.
func (r *queryResolver) Nonprofits(ctx context.Context, causes []string, size *model.NonprofitSize, verifiedOnly *bool, search *string) ([]*model.Nonprofit, error) {
	panic(fmt.Errorf("not implemented: Nonprofits - nonprofits"))
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, status *model.ProjectStatus, skillsNeeded []string, timeCommitment *model.TimeCommitment, urgency *model.UrgencyLevel, nonprofitID *string) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// RecommendedProjects is the resolver for the recommendedProjects field.
func (r *queryResolver) RecommendedProjects(ctx context.Context, limit *int32) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: RecommendedProjects - recommendedProjects"))
}

// RecommendedVolunteers is the resolver for the recommendedVolunteers field.
func (r *queryResolver) RecommendedVolunteers(ctx context.Context, projectID string, limit *int32) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: RecommendedVolunteers - recommendedVolunteers"))
}

// Skills is the resolver for the skills field.
func (r *queryResolver) Skills(ctx context.Context) ([]*model.Skill, error) {
	panic(fmt.Errorf("not implemented: Skills - skills"))
}

// Causes is the resolver for the causes field.
func (r *queryResolver) Causes(ctx context.Context) ([]*model.Cause, error) {
	panic(fmt.Errorf("not implemented: Causes - causes"))
}

// ID is the resolver for the id field.
func (r *skillResolver) ID(ctx context.Context, obj *model.Skill) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ProjectUpdated is the resolver for the projectUpdated field.
func (r *subscriptionResolver) ProjectUpdated(ctx context.Context, projectID string) (<-chan *model.Project, error) {
	panic(fmt.Errorf("not implemented: ProjectUpdated - projectUpdated"))
}

// ApplicationReceived is the resolver for the applicationReceived field.
func (r *subscriptionResolver) ApplicationReceived(ctx context.Context) (<-chan *model.Application, error) {
	panic(fmt.Errorf("not implemented: ApplicationReceived - applicationReceived"))
}

// EngagementStarted is the resolver for the engagementStarted field.
func (r *subscriptionResolver) EngagementStarted(ctx context.Context) (<-chan *model.Engagement, error) {
	panic(fmt.Errorf("not implemented: EngagementStarted - engagementStarted"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Avatar is the resolver for the avatar field.
func (r *userResolver) Avatar(ctx context.Context, obj *model.User) (*string, error) {
	panic(fmt.Errorf("not implemented: Avatar - avatar"))
}

// LinkedIn is the resolver for the linkedIn field.
func (r *userResolver) LinkedIn(ctx context.Context, obj *model.User) (*string, error) {
	panic(fmt.Errorf("not implemented: LinkedIn - linkedIn"))
}

// Portfolio is the resolver for the portfolio field.
func (r *userResolver) Portfolio(ctx context.Context, obj *model.User) (*string, error) {
	panic(fmt.Errorf("not implemented: Portfolio - portfolio"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *model.User) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// HoursLogged is the resolver for the hoursLogged field.
func (r *userResolver) HoursLogged(ctx context.Context, obj *model.User) ([]*model.HoursLogged, error) {
	panic(fmt.Errorf("not implemented: HoursLogged - hoursLogged"))
}

// Application returns ApplicationResolver implementation.
func (r *Resolver) Application() ApplicationResolver { return &applicationResolver{r} }

// Availability returns AvailabilityResolver implementation.
func (r *Resolver) Availability() AvailabilityResolver { return &availabilityResolver{r} }

// Cause returns CauseResolver implementation.
func (r *Resolver) Cause() CauseResolver { return &causeResolver{r} }

// Engagement returns EngagementResolver implementation.
func (r *Resolver) Engagement() EngagementResolver { return &engagementResolver{r} }

// HoursLogged returns HoursLoggedResolver implementation.
func (r *Resolver) HoursLogged() HoursLoggedResolver { return &hoursLoggedResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Nonprofit returns NonprofitResolver implementation.
func (r *Resolver) Nonprofit() NonprofitResolver { return &nonprofitResolver{r} }

// Project returns ProjectResolver implementation.
func (r *Resolver) Project() ProjectResolver { return &projectResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Skill returns SkillResolver implementation.
func (r *Resolver) Skill() SkillResolver { return &skillResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type applicationResolver struct{ *Resolver }
type availabilityResolver struct{ *Resolver }
type causeResolver struct{ *Resolver }
type engagementResolver struct{ *Resolver }
type hoursLoggedResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type nonprofitResolver struct{ *Resolver }
type projectResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type skillResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
